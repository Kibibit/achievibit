name: Add PR Deploy Badge
# https://docs.github.com/en/actions/reference/events-that-trigger-workflows
on: [deployment_status]

jobs:
  badge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    # only runs this job on successful deploy
    if: github.event.deployment_status.state == 'success'
    steps:
    - name: TEST KB-BADGER-ACTION
      uses: kibibit/kb-badger-action@v1.4
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        badge-left: demo-demo
        badge-right: application
        badge-logo: heroku
        badge-path: pizza
        badge2-left: demo--demo
        badge2-right: api--docs
        badge2-color: 85EA2D
        badge2-logo: swagger
        badge2-path: lazagna
        # github_token: ${{secrets.GITHUB_TOKEN}}
    # - name: comment on PR with deployment link
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       const { DEPLOYMENT_URL } = process.env;
    #       const owner = context.repo.owner;
    #       const repo = context.repo.repo;
    #       console.log(DEPLOYMENT_URL);
    #       const deployment_id = +DEPLOYMENT_URL.replace(/^.*deployments\//, '');
    #       const deployment = await github.repos.getDeployment({
    #         owner,
    #         repo,
    #         deployment_id
    #       });
    #       const envUrl = deployment.data.payload.web_url;
    #       const commitRef = deployment.data.ref;
    #       const refs = await github.git.listMatchingRefs({
    #         owner,
    #         repo,
    #         ref: undefined
    #       });
    #       const prRefs = refs.data.filter((ref) => ref.object.sha === commitRef && ref.ref.startsWith('refs/pull/'));
    #       console.log(prRefs);

    #       for (const prRef of prRefs) {

    #         if (prRef) {
    #           const prId = +prRef.ref.replace('refs/pull/', '').replace('/head', '');

    #           console.log({
    #             owner,
    #             repo,
    #             pull_number: prId
    #           });

    #           const pr = await github.pulls.get({
    #             owner,
    #             repo,
    #             pull_number: prId
    #           });

    #           console.log(pr);

    #           let body;
              
    #           const demoAppBadge = `[![workflow: Demo App](https://img.shields.io/badge/demo-application-informational?logo=heroku)](${ envUrl })`;
    #           const demoApiDocsBadge = `[![workflow: Demo Api Docs](https://img.shields.io/badge/demo-api--docs-85EA2D?logo=swagger)](${ envUrl }api/docs)`;

    #           if (pr.data.body.includes('[![workflow: Demo App]')) {
    #             body = pr.data.body.replace(
    #               /\[!\[workflow:\sDemo\sApp\]\(https:\/\/img\.shields\.io\/badge\/demo\-application\-informational\?logo=heroku\)\]\(.*?\)/,
    #               demoAppBadge
    #             )
    #             .replace(
    #               /\[!\[workflow:\sDemo\sApi\sDocs\]\(https:\/\/img\.shields\.io\/badge\/demo\-api\-\-docs\-85EA2D\?logo=swagger\)\]\(.*?\)/,
    #               demoApiDocsBadge
    #             )
    #           } else {
    #             body = [
    #               demoAppBadge,
    #               ' ',
    #               demoApiDocsBadge,
    #               '\n\n',
    #               `${ pr.data.body }`
    #             ].join('')
    #           }

    #           await github.pulls.update({
    #             owner,
    #             repo,
    #             pull_number: prId,
    #             body
    #           });
    #         }
    #       }
    #   env:
    #     DEPLOYMENT_URL: ${{ github.event.deployment_status.deployment_url }}